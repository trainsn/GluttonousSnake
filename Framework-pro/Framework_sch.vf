////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Framework_sch.vf
// /___/   /\     Timestamp : 01/09/2017 15:46:13
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/logic/Framework-pro/ngc -intstyle ise -family kintex7 -verilog E:/logic/Framework-pro/Framework_sch.vf -w E:/logic/Framework-pro/Code/Framework_sch.sch
//Design Name: Framework_sch
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MC14495_ZJU_MUSER_Framework_sch(D0, 
                                       D1, 
                                       D2, 
                                       D3, 
                                       LE, 
                                       point, 
                                       a, 
                                       b, 
                                       c, 
                                       d, 
                                       e, 
                                       f, 
                                       g, 
                                       p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire ND0;
   wire ND1;
   wire ND2;
   wire ND3;
   wire XLXN_34;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_95;
   wire XLXN_100;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_136;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   wire XLXN_140;
   wire XLXN_141;
   wire XLXN_143;
   wire XLXN_147;
   wire XLXN_148;
   wire XLXN_154;
   wire XLXN_155;
   wire XLXN_156;
   wire XLXN_157;
   
   AND3  D2D1D0 (.I0(D2), 
                .I1(D1), 
                .I2(D0), 
                .O(XLXN_50));
   AND3  D2D1ND0 (.I0(D2), 
                 .I1(D1), 
                 .I2(ND0), 
                 .O(XLXN_39));
   AND3  D3D1D0 (.I0(D3), 
                .I1(D1), 
                .I2(D0), 
                .O(XLXN_40));
   AND3  D3D2D1 (.I0(D3), 
                .I1(D2), 
                .I2(D1), 
                .O(XLXN_42));
   AND3  D3D2ND0 (.I0(D3), 
                 .I1(D2), 
                 .I2(ND0), 
                 .O(XLXN_38));
   AND4  D3D2ND1D0 (.I0(D3), 
                   .I1(D2), 
                   .I2(ND1), 
                   .I3(D0), 
                   .O(XLXN_135));
   AND4  D3D2ND1ND0 (.I0(D3), 
                    .I1(D2), 
                    .I2(ND1), 
                    .I3(ND0), 
                    .O(XLXN_141));
   AND4  D3ND2D1D0 (.I0(D3), 
                   .I1(ND2), 
                   .I2(D1), 
                   .I3(D0), 
                   .O(XLXN_36));
   AND4  D3ND2D1ND0 (.I0(D3), 
                    .I1(D1), 
                    .I2(ND2), 
                    .I3(ND0), 
                    .O(XLXN_51));
   AND3  ND2ND1D0 (.I0(ND2), 
                  .I1(ND1), 
                  .I2(D0), 
                  .O(XLXN_134));
   AND2  ND3D0 (.I0(ND3), 
               .I1(D0), 
               .O(XLXN_132));
   AND3  ND3D1D0 (.I0(ND3), 
                 .I1(D1), 
                 .I2(D0), 
                 .O(XLXN_138));
   AND4  ND3D2D1D0 (.I0(ND3), 
                   .I1(D2), 
                   .I2(D1), 
                   .I3(D0), 
                   .O(XLXN_140));
   AND3  ND3D2ND1 (.I0(ND3), 
                  .I1(D2), 
                  .I2(ND1), 
                  .O(XLXN_133));
   AND4  ND3D2ND1D0 (.I0(ND3), 
                    .I1(D2), 
                    .I2(ND1), 
                    .I3(D0), 
                    .O(XLXN_41));
   AND4  ND3D2ND1ND0 (.I0(ND3), 
                     .I1(D2), 
                     .I2(ND1), 
                     .I3(ND0), 
                     .O(XLXN_34));
   AND3  ND3ND2D0 (.I0(ND3), 
                  .I1(ND2), 
                  .I2(D0), 
                  .O(XLXN_137));
   AND3  ND3ND2D1 (.I0(ND3), 
                  .I1(ND2), 
                  .I2(D1), 
                  .O(XLXN_136));
   AND4  ND3ND2D1ND0 (.I0(ND3), 
                     .I1(ND2), 
                     .I2(D1), 
                     .I3(ND0), 
                     .O(XLXN_100));
   AND3  ND3ND2ND1 (.I0(ND3), 
                   .I1(ND2), 
                   .I2(ND1), 
                   .O(XLXN_139));
   AND4  ND3ND2ND1D0 (.I0(ND3), 
                     .I1(ND2), 
                     .I2(ND1), 
                     .I3(D0), 
                     .O(XLXN_95));
   OR4  ORA (.I0(XLXN_95), 
            .I1(XLXN_34), 
            .I2(XLXN_135), 
            .I3(XLXN_36), 
            .O(XLXN_157));
   OR4  ORB (.I0(XLXN_38), 
            .I1(XLXN_39), 
            .I2(XLXN_40), 
            .I3(XLXN_41), 
            .O(XLXN_156));
   OR3  ORC (.I0(XLXN_42), 
            .I1(XLXN_100), 
            .I2(XLXN_38), 
            .O(XLXN_155));
   OR4  ORD (.I0(XLXN_50), 
            .I1(XLXN_51), 
            .I2(XLXN_95), 
            .I3(XLXN_34), 
            .O(XLXN_154));
   OR3  ORE (.I0(XLXN_132), 
            .I1(XLXN_133), 
            .I2(XLXN_134), 
            .O(XLXN_148));
   OR4  ORF (.I0(XLXN_138), 
            .I1(XLXN_137), 
            .I2(XLXN_136), 
            .I3(XLXN_135), 
            .O(XLXN_147));
   OR3  ORG (.I0(XLXN_139), 
            .I1(XLXN_140), 
            .I2(XLXN_141), 
            .O(XLXN_143));
   INV  XLXI_3 (.I(D3), 
               .O(ND3));
   INV  XLXI_4 (.I(D2), 
               .O(ND2));
   INV  XLXI_5 (.I(D1), 
               .O(ND1));
   INV  XLXI_6 (.I(D0), 
               .O(ND0));
   OR2  XLXI_77 (.I0(LE), 
                .I1(XLXN_143), 
                .O(g));
   OR2  XLXI_78 (.I0(LE), 
                .I1(XLXN_147), 
                .O(f));
   OR2  XLXI_79 (.I0(LE), 
                .I1(XLXN_148), 
                .O(e));
   OR2  XLXI_80 (.I0(LE), 
                .I1(XLXN_154), 
                .O(d));
   OR2  XLXI_81 (.I0(LE), 
                .I1(XLXN_155), 
                .O(c));
   OR2  XLXI_82 (.I0(LE), 
                .I1(XLXN_156), 
                .O(b));
   OR2  XLXI_83 (.I0(LE), 
                .I1(XLXN_157), 
                .O(a));
   INV  XLXI_84 (.I(point), 
                .O(p));
endmodule
`timescale 1ns / 1ps

module MUX441_MUSER_Framework_sch(I0, 
                                  I1, 
                                  I2, 
                                  I3, 
                                  s, 
                                  o);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] o;
   
   wire NS0;
   wire NS1;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_126;
   wire XLXN_127;
   wire XLXN_128;
   wire XLXN_129;
   wire XLXN_131;
   wire XLXN_132;
   wire XLXN_133;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_136;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   wire XLXN_142;
   wire XLXN_145;
   wire XLXN_148;
   
   AND2  I00 (.I0(I0[0]), 
             .I1(XLXN_139), 
             .O(XLXN_20));
   AND2  I01 (.I0(I0[1]), 
             .I1(XLXN_139), 
             .O(XLXN_126));
   AND2  I02 (.I0(I0[2]), 
             .I1(XLXN_139), 
             .O(XLXN_131));
   AND2  I03 (.I0(I0[3]), 
             .I1(XLXN_139), 
             .O(XLXN_135));
   AND2  I10 (.I0(I1[0]), 
             .I1(XLXN_142), 
             .O(XLXN_21));
   AND2  I11 (.I0(I1[1]), 
             .I1(XLXN_142), 
             .O(XLXN_127));
   AND2  I12 (.I0(I1[2]), 
             .I1(XLXN_142), 
             .O(XLXN_132));
   AND2  I13 (.I0(I1[3]), 
             .I1(XLXN_142), 
             .O(XLXN_136));
   AND2  I20 (.I0(I2[0]), 
             .I1(XLXN_145), 
             .O(XLXN_22));
   AND2  I21 (.I0(I2[1]), 
             .I1(XLXN_145), 
             .O(XLXN_128));
   AND2  I22 (.I0(I2[2]), 
             .I1(XLXN_145), 
             .O(XLXN_133));
   AND2  I23 (.I0(I2[3]), 
             .I1(XLXN_145), 
             .O(XLXN_137));
   AND2  I30 (.I0(I3[0]), 
             .I1(XLXN_148), 
             .O(XLXN_23));
   AND2  I31 (.I0(I3[1]), 
             .I1(XLXN_148), 
             .O(XLXN_129));
   AND2  I32 (.I0(I3[2]), 
             .I1(XLXN_148), 
             .O(XLXN_134));
   AND2  I33 (.I0(I3[3]), 
             .I1(XLXN_148), 
             .O(XLXN_138));
   AND2  NS1NS0 (.I0(NS0), 
                .I1(NS1), 
                .O(XLXN_139));
   AND2  NS1S0 (.I0(s[0]), 
               .I1(NS1), 
               .O(XLXN_142));
   OR4  O0 (.I0(XLXN_23), 
           .I1(XLXN_22), 
           .I2(XLXN_21), 
           .I3(XLXN_20), 
           .O(o[0]));
   OR4  O1 (.I0(XLXN_129), 
           .I1(XLXN_128), 
           .I2(XLXN_127), 
           .I3(XLXN_126), 
           .O(o[1]));
   OR4  O2 (.I0(XLXN_134), 
           .I1(XLXN_133), 
           .I2(XLXN_132), 
           .I3(XLXN_131), 
           .O(o[2]));
   OR4  O3 (.I0(XLXN_138), 
           .I1(XLXN_137), 
           .I2(XLXN_136), 
           .I3(XLXN_135), 
           .O(o[3]));
   AND2  S1NS0 (.I0(NS0), 
               .I1(s[1]), 
               .O(XLXN_145));
   AND2  S1S0 (.I0(s[0]), 
              .I1(s[1]), 
              .O(XLXN_148));
   INV  XLXI_1 (.I(s[1]), 
               .O(NS1));
   INV  XLXI_2 (.I(s[0]), 
               .O(NS0));
endmodule
`timescale 1ns / 1ps

module ExMUX_sch_MUSER_Framework_sch(I0, 
                                     I1, 
                                     I2, 
                                     I3, 
                                     I4, 
                                     I5, 
                                     I6, 
                                     I7, 
                                     s, 
                                     o);

    input [7:0] I0;
    input [7:0] I1;
    input [7:0] I2;
    input [7:0] I3;
    input [7:0] I4;
    input [7:0] I5;
    input [7:0] I6;
    input [7:0] I7;
    input [2:0] s;
   output [7:0] o;
   
   wire [3:0] o0;
   wire [3:0] o1;
   wire [3:0] o2;
   wire [3:0] o3;
   wire XLXN_36;
   wire XLXN_92;
   wire XLXN_93;
   wire XLXN_94;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   wire XLXN_102;
   wire XLXN_103;
   wire XLXN_104;
   wire XLXN_105;
   wire XLXN_106;
   wire XLXN_107;
   
   MUX441_MUSER_Framework_sch  XLXI_1 (.I0(I0[3:0]), 
                                      .I1(I1[3:0]), 
                                      .I2(I2[3:0]), 
                                      .I3(I3[3:0]), 
                                      .s(s[1:0]), 
                                      .o(o0[3:0]));
   MUX441_MUSER_Framework_sch  XLXI_2 (.I0(I4[3:0]), 
                                      .I1(I5[3:0]), 
                                      .I2(I6[3:0]), 
                                      .I3(I7[3:0]), 
                                      .s(s[1:0]), 
                                      .o(o1[3:0]));
   MUX441_MUSER_Framework_sch  XLXI_3 (.I0(I0[7:4]), 
                                      .I1(I1[7:4]), 
                                      .I2(I2[7:4]), 
                                      .I3(I3[7:4]), 
                                      .s(s[1:0]), 
                                      .o(o2[3:0]));
   MUX441_MUSER_Framework_sch  XLXI_4 (.I0(I4[7:4]), 
                                      .I1(I5[7:4]), 
                                      .I2(I6[7:4]), 
                                      .I3(I7[7:4]), 
                                      .s(s[1:0]), 
                                      .o(o3[3:0]));
   INV  XLXI_13 (.I(s[2]), 
                .O(XLXN_36));
   AND2  XLXI_14 (.I0(o0[0]), 
                 .I1(XLXN_36), 
                 .O(XLXN_92));
   AND2  XLXI_15 (.I0(o1[0]), 
                 .I1(s[2]), 
                 .O(XLXN_93));
   AND2  XLXI_16 (.I0(o0[1]), 
                 .I1(XLXN_36), 
                 .O(XLXN_94));
   AND2  XLXI_17 (.I0(o1[1]), 
                 .I1(s[2]), 
                 .O(XLXN_95));
   AND2  XLXI_18 (.I0(o0[2]), 
                 .I1(XLXN_36), 
                 .O(XLXN_96));
   AND2  XLXI_19 (.I0(o1[2]), 
                 .I1(s[2]), 
                 .O(XLXN_97));
   AND2  XLXI_20 (.I0(o0[3]), 
                 .I1(XLXN_36), 
                 .O(XLXN_98));
   AND2  XLXI_21 (.I0(o1[3]), 
                 .I1(s[2]), 
                 .O(XLXN_99));
   AND2  XLXI_22 (.I0(o2[0]), 
                 .I1(XLXN_36), 
                 .O(XLXN_100));
   AND2  XLXI_23 (.I0(o3[0]), 
                 .I1(s[2]), 
                 .O(XLXN_101));
   AND2  XLXI_24 (.I0(o2[1]), 
                 .I1(XLXN_36), 
                 .O(XLXN_102));
   AND2  XLXI_25 (.I0(o3[1]), 
                 .I1(s[2]), 
                 .O(XLXN_103));
   AND2  XLXI_26 (.I0(o2[2]), 
                 .I1(XLXN_36), 
                 .O(XLXN_104));
   AND2  XLXI_27 (.I0(o3[2]), 
                 .I1(s[2]), 
                 .O(XLXN_105));
   AND2  XLXI_28 (.I0(o2[3]), 
                 .I1(XLXN_36), 
                 .O(XLXN_106));
   AND2  XLXI_29 (.I0(o3[3]), 
                 .I1(s[2]), 
                 .O(XLXN_107));
   OR2  XLXI_30 (.I0(XLXN_93), 
                .I1(XLXN_92), 
                .O(o[0]));
   OR2  XLXI_31 (.I0(XLXN_95), 
                .I1(XLXN_94), 
                .O(o[1]));
   OR2  XLXI_36 (.I0(XLXN_97), 
                .I1(XLXN_96), 
                .O(o[2]));
   OR2  XLXI_37 (.I0(XLXN_99), 
                .I1(XLXN_98), 
                .O(o[3]));
   OR2  XLXI_38 (.I0(XLXN_101), 
                .I1(XLXN_100), 
                .O(o[4]));
   OR2  XLXI_39 (.I0(XLXN_103), 
                .I1(XLXN_102), 
                .O(o[5]));
   OR2  XLXI_40 (.I0(XLXN_105), 
                .I1(XLXN_104), 
                .O(o[6]));
   OR2  XLXI_41 (.I0(XLXN_107), 
                .I1(XLXN_106), 
                .O(o[7]));
endmodule
`timescale 1ns / 1ps

module ScanSync_MUSER_Framework_sch(Hexs, 
                                    LES, 
                                    point, 
                                    Scan, 
                                    AN, 
                                    Hexo, 
                                    LE, 
                                    p);

    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
   output [3:0] AN;
   output [3:0] Hexo;
   output LE;
   output p;
   
   wire [7:0] COM;
   wire G0;
   wire [7:0] Hex;
   wire V5;
   
   BUF  XLXI_1 (.I(Hex[7]), 
               .O(Hexo[3]));
   BUF  XLXI_2 (.I(Hex[6]), 
               .O(Hexo[2]));
   BUF  XLXI_3 (.I(Hex[5]), 
               .O(Hexo[1]));
   BUF  XLXI_4 (.I(Hex[4]), 
               .O(Hexo[0]));
   BUF  XLXI_5 (.I(COM[3]), 
               .O(AN[3]));
   BUF  XLXI_6 (.I(COM[2]), 
               .O(AN[2]));
   BUF  XLXI_7 (.I(COM[1]), 
               .O(AN[1]));
   BUF  XLXI_8 (.I(COM[0]), 
               .O(AN[0]));
   BUF  XLXI_9 (.I(COM[7]), 
               .O(LE));
   BUF  XLXI_10 (.I(COM[6]), 
                .O(p));
   ExMUX_sch_MUSER_Framework_sch  XLXI_13 (.I0({Hexs[3:0], G0, G0, G0, G0}), 
                                          .I1({Hexs[7:4], G0, G0, G0, G0}), 
                                          .I2({Hexs[11:8], G0, G0, G0, G0}), 
                                          .I3({Hexs[15:12], G0, G0, G0, G0}), 
                                          .I4({Hexs[19:16], G0, G0, G0, G0}), 
                                          .I5({Hexs[23:20], G0, G0, G0, G0}), 
                                          .I6({Hexs[27:24], G0, G0, G0, G0}), 
                                          .I7({Hexs[31:28], G0, G0, G0, G0}), 
                                          .s(Scan[2:0]), 
                                          .o(Hex[7:0]));
   ExMUX_sch_MUSER_Framework_sch  XLXI_14 (.I0({LES[0], point[0], G0, G0, V5, 
         V5, V5, G0}), 
                                          .I1({LES[1], point[1], G0, G0, V5, 
         V5, G0, V5}), 
                                          .I2({LES[2], point[2], G0, G0, V5, 
         G0, V5, V5}), 
                                          .I3({LES[3], point[3], G0, G0, G0, 
         V5, V5, V5}), 
                                          .I4({LES[4], point[4], G0, G0, V5, 
         V5, V5, G0}), 
                                          .I5({LES[5], point[5], G0, G0, V5, 
         V5, G0, V5}), 
                                          .I6({LES[6], point[6], G0, G0, V5, 
         G0, V5, V5}), 
                                          .I7({LES[7], point[7], G0, G0, G0, 
         V5, V5, V5}), 
                                          .s(Scan[2:0]), 
                                          .o(COM[7:0]));
endmodule
`timescale 1ns / 1ps

module Seg7_Dev_MUSER_Framework_sch(flash, 
                                    Hexs, 
                                    LES, 
                                    point, 
                                    Scan, 
                                    AN, 
                                    SEGMENT);

    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input [2:0] Scan;
   output [3:0] AN;
   output [7:0] SEGMENT;
   
   wire G0;
   wire [3:0] Hex;
   wire V5;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   
   ScanSync_MUSER_Framework_sch  XLXI_15 (.Hexs(Hexs[31:0]), 
                                         .LES(LES[7:0]), 
                                         .point(point[7:0]), 
                                         .Scan(Scan[2:0]), 
                                         .AN(AN[3:0]), 
                                         .Hexo(Hex[3:0]), 
                                         .LE(XLXN_137), 
                                         .p(XLXN_139));
   AND2  XLXI_16 (.I0(XLXN_137), 
                 .I1(flash), 
                 .O(XLXN_138));
   MC14495_ZJU_MUSER_Framework_sch  XLXI_17 (.D0(Hex[0]), 
                                            .D1(Hex[1]), 
                                            .D2(Hex[2]), 
                                            .D3(Hex[3]), 
                                            .LE(XLXN_138), 
                                            .point(XLXN_139), 
                                            .a(SEGMENT[0]), 
                                            .b(SEGMENT[1]), 
                                            .c(SEGMENT[2]), 
                                            .d(SEGMENT[3]), 
                                            .e(SEGMENT[4]), 
                                            .f(SEGMENT[5]), 
                                            .g(SEGMENT[6]), 
                                            .p(SEGMENT[7]));
   VCC  XLXI_18 (.P(V5));
   GND  XLXI_19 (.G(G0));
endmodule
`timescale 1ns / 1ps

module Display_MUSER_Framework_sch(clk, 
                                   flash, 
                                   Hexs, 
                                   LES, 
                                   point, 
                                   rst, 
                                   Start, 
                                   SW0, 
                                   seg_clk, 
                                   seg_clrn, 
                                   SEG_PEN, 
                                   seg_sout);

    input clk;
    input flash;
    input [31:0] Hexs;
    input [7:0] LES;
    input [7:0] point;
    input rst;
    input Start;
    input SW0;
   output seg_clk;
   output seg_clrn;
   output SEG_PEN;
   output seg_sout;
   
   wire [63:0] XLXN_10;
   wire [63:0] XLXN_12;
   
   P2S  XLXI_1 (.clk(clk), 
               .P_Data(XLXN_12[63:0]), 
               .rst(rst), 
               .Serial(Start), 
               .EN(SEG_PEN), 
               .sout(seg_sout), 
               .s_clk(seg_clk), 
               .s_clrn(seg_clrn));
   HexTo8SEG  XLXI_2 (.flash(flash), 
                     .Hexs(Hexs[31:0]), 
                     .LES(LES[7:0]), 
                     .points(point[7:0]), 
                     .SEG_TXT(XLXN_10[63:0]));
   MUX2T1_64  XLXI_3 (.a(XLXN_10[63:0]), 
                     .b(), 
                     .sel(SW0), 
                     .o(XLXN_12[63:0]));
endmodule
`timescale 1ns / 1ps

module counter4_MUSER_Framework_sch(clk, 
                                    Qa, 
                                    Qb, 
                                    Qc, 
                                    Qd, 
                                    Rc);

    input clk;
   output Qa;
   output Qb;
   output Qc;
   output Qd;
   output Rc;
   
   wire nQa;
   wire nQb;
   wire nQc;
   wire nQd;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_30;
   wire Qa_DUMMY;
   wire Qb_DUMMY;
   wire Qc_DUMMY;
   wire Qd_DUMMY;
   
   assign Qa = Qa_DUMMY;
   assign Qb = Qb_DUMMY;
   assign Qc = Qc_DUMMY;
   assign Qd = Qd_DUMMY;
   FD #( .INIT(1'b0) ) XLXI_1 (.C(clk), 
              .D(nQa), 
              .Q(Qa_DUMMY));
   FD #( .INIT(1'b0) ) XLXI_2 (.C(clk), 
              .D(XLXN_30), 
              .Q(Qb_DUMMY));
   FD #( .INIT(1'b0) ) XLXI_3 (.C(clk), 
              .D(XLXN_15), 
              .Q(Qc_DUMMY));
   FD #( .INIT(1'b0) ) XLXI_4 (.C(clk), 
              .D(XLXN_23), 
              .Q(Qd_DUMMY));
   INV  XLXI_8 (.I(Qb_DUMMY), 
               .O(nQb));
   XNOR2  XLXI_9 (.I0(nQb), 
                 .I1(Qa_DUMMY), 
                 .O(XLXN_30));
   XNOR2  XLXI_10 (.I0(nQc), 
                  .I1(XLXN_14), 
                  .O(XLXN_15));
   XNOR2  XLXI_11 (.I0(nQd), 
                  .I1(XLXN_22), 
                  .O(XLXN_23));
   NOR2  XLXI_12 (.I0(nQa), 
                 .I1(nQb), 
                 .O(XLXN_14));
   INV  XLXI_13 (.I(Qc_DUMMY), 
                .O(nQc));
   NOR3  XLXI_14 (.I0(nQa), 
                 .I1(nQb), 
                 .I2(nQc), 
                 .O(XLXN_22));
   NOR4  XLXI_15 (.I0(nQa), 
                 .I1(nQb), 
                 .I2(nQc), 
                 .I3(nQd), 
                 .O(Rc));
   INV  XLXI_16 (.I(Qd_DUMMY), 
                .O(nQd));
   INV  XLXI_17 (.I(Qa_DUMMY), 
                .O(nQa));
endmodule
`timescale 1ns / 1ps

module Framework_sch(clk_100mhz, 
                     K_COL, 
                     RSTN, 
                     SW, 
                     AN, 
                     Buzzer, 
                     CR, 
                     K_ROW, 
                     LED, 
                     LEDCLK, 
                     LEDCLR, 
                     LEDDT, 
                     LEDEN, 
                     RDY, 
                     readn, 
                     SEGCLK, 
                     SEGCLR, 
                     SEGDT, 
                     SEGEN, 
                     SEGMENT, 
                     vga_blue, 
                     vga_green, 
                     vga_h_sync, 
                     vga_red, 
                     vga_v_sync);

    input clk_100mhz;
    input [3:0] K_COL;
    input RSTN;
    input [15:0] SW;
   output [3:0] AN;
   output Buzzer;
   output CR;
   output [4:0] K_ROW;
   output [7:0] LED;
   output LEDCLK;
   output LEDCLR;
   output LEDDT;
   output LEDEN;
   output RDY;
   output readn;
   output SEGCLK;
   output SEGCLR;
   output SEGDT;
   output SEGEN;
   output [7:0] SEGMENT;
   output [3:0] vga_blue;
   output [3:0] vga_green;
   output vga_h_sync;
   output [3:0] vga_red;
   output vga_v_sync;
   
   wire addLength;
   wire [31:0] Ai;
   wire [31:0] ALUout;
   wire [31:0] Bi;
   wire [7:0] blink;
   wire [3:0] BTN_OK;
   wire [31:0] cnt;
   wire Co;
   wire [31:0] Disp_num;
   wire [31:0] Div;
   wire G0;
   wire [7:0] LE_out;
   wire N0;
   wire [7:0] point_out;
   wire [3:0] Pulse;
   wire Qa;
   wire [31:0] QA;
   wire Qb;
   wire [31:0] QB;
   wire Qc;
   wire Qd;
   wire Rc_4;
   wire Rc_32;
   wire rst;
   wire [15:0] SW_OK;
   wire V5;
   wire [4:0] XLXN_8;
   wire XLXN_66;
   wire [31:0] XLXN_82;
   wire [31:0] XLXN_101;
   wire [5:0] XLXN_162;
   wire [5:0] XLXN_181;
   wire XLXN_188;
   wire XLXN_190;
   wire [9:0] XLXN_191;
   wire [1:0] XLXN_209;
   wire [5:0] XLXN_212;
   wire [5:0] XLXN_217;
   wire [11:0] XLXN_222;
   wire [9:0] XLXN_230;
   wire [1:0] XLXN_232;
   wire XLXN_241;
   wire [31:0] XLXN_242;
   wire zero;
   wire RDY_DUMMY;
   wire readn_DUMMY;
   
   assign RDY = RDY_DUMMY;
   assign readn = readn_DUMMY;
   SAnti_jitter  XLXI_2 (.clk(clk_100mhz), 
                        .Key_y(K_COL[3:0]), 
                        .readn(readn_DUMMY), 
                        .RSTN(RSTN), 
                        .SW(SW[15:0]), 
                        .BTN_OK(BTN_OK[3:0]), 
                        .CR(CR), 
                        .Key_out(XLXN_8[4:0]), 
                        .Key_ready(RDY_DUMMY), 
                        .Key_x(K_ROW[4:0]), 
                        .pulse_out(Pulse[3:0]), 
                        .rst(rst), 
                        .SW_OK(SW_OK[15:0]));
   SEnter_2_32  XLXI_3 (.BTN(BTN_OK[2:0]), 
                       .clk(clk_100mhz), 
                       .Ctrl({SW_OK[7:5], SW_OK[15], SW_OK[0]}), 
                       .Din(XLXN_8[4:0]), 
                       .D_ready(RDY_DUMMY), 
                       .Ai(Ai[31:0]), 
                       .Bi(Bi[31:0]), 
                       .blink(blink[7:0]), 
                       .readn(readn_DUMMY));
   clkdiv  XLXI_5 (.clk(clk_100mhz), 
                  .rst(rst), 
                  .clkdiv(Div[31:0]));
   Multi_8CH32  XLXI_6 (.blink_in({N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, blink[3:0], N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, N0, 
         N0, N0, blink[7:0], blink[7:0]}), 
                       .clk(clk_100mhz), 
                       .Data0(Ai[31:0]), 
                       .data1(Bi[31:0]), 
                       .data2(ALUout[31:0]), 
                       .data3(cnt[31:0]), 
                       .data4(XLXN_101[31:0]), 
                       .data5(QA[31:0]), 
                       .data6(QB[31:0]), 
                       .data7(XLXN_242[31:0]), 
                       .EN(V5), 
                       .point_in({Div[31:0], Div[31:0]}), 
                       .rst(rst), 
                       .Test(SW_OK[7:5]), 
                       .blink_out(LE_out[7:0]), 
                       .Disp_num(Disp_num[31:0]), 
                       .point_out(point_out[7:0]));
   VCC  XLXI_14 (.P(V5));
   GND  XLXI_15 (.G(G0));
   Seg7_Dev_MUSER_Framework_sch  XLXI_20 (.flash(Div[25]), 
                                         .Hexs(Disp_num[31:0]), 
                                         .LES(LE_out[7:0]), 
                                         .point(point_out[7:0]), 
                                         .Scan({SW_OK[1], Div[19:18]}), 
                                         .AN(AN[3:0]), 
                                         .SEGMENT(SEGMENT[7:0]));
   BUF  XLXI_22 (.I(V5), 
                .O(Buzzer));
   PIO  XLXI_24 (.clk(clk_100mhz), 
                .EN(V5), 
                .PData_in({Div[31:8], Rc_32, Rc_4, Qd, Qc, Qb, Qa, N0, Co}), 
                .rst(N0), 
                .GPIOf0(), 
                .LED(LED[7:0]));
   ALU  XLXI_27 (.A(XLXN_82[31:0]), 
                .ALU_Ctr(SW_OK[4:2]), 
                .B(QB[31:0]), 
                .Co(XLXN_66), 
                .overflow(), 
                .res(ALUout[31:0]), 
                .zero(zero));
   GPIO  XLXI_28 (.clk(clk_100mhz), 
                 .EN(Div[20]), 
                 .P_Data({Div[31:8], Rc_32, Rc_4, Qd, Qc, Qb, Qa, N0, Co}), 
                 .rst(rst), 
                 .Start(V5), 
                 .GPIOf0(), 
                 .led_clk(LEDCLK), 
                 .led_clrn(LEDCLR), 
                 .LED_PEN(LEDEN), 
                 .led_sout(LEDDT));
   counter4_MUSER_Framework_sch  XLXI_30 (.clk(Div[26]), 
                                         .Qa(Qa), 
                                         .Qb(Qb), 
                                         .Qc(Qc), 
                                         .Qd(Qd), 
                                         .Rc(Rc_4));
   counter_32_rev  XLXI_31 (.clk(Div[26]), 
                           .Load(BTN_OK[1]), 
                           .pData(Ai[31:0]), 
                           .s(BTN_OK[0]), 
                           .cnt(cnt[31:0]), 
                           .Rc(Rc_32));
   Regs_8_32  XLXI_33 (.Addr_A(Bi[2:0]), 
                      .Addr_B(Bi[6:4]), 
                      .Addr_W(Bi[10:8]), 
                      .clk(addLength), 
                      .cr(rst), 
                      .Di(ALUout[31:0]), 
                      .WE(Bi[12]), 
                      .QA(QA[31:0]), 
                      .QB(QB[31:0]));
   MUX2T1_32  XLXI_34 (.I0(Ai[31:0]), 
                      .I1(QA[31:0]), 
                      .s(Bi[13]), 
                      .o(XLXN_82[31:0]));
   Display_MUSER_Framework_sch  XLXI_35 (.clk(clk_100mhz), 
                                        .flash(Div[25]), 
                                        .Hexs(Disp_num[31:0]), 
                                        .LES(LE_out[7:0]), 
                                        .point(point_out[7:0]), 
                                        .rst(rst), 
                                        .Start(Div[20]), 
                                        .SW0(), 
                                        .seg_clk(SEGCLK), 
                                        .seg_clrn(SEGCLR), 
                                        .SEG_PEN(SEGEN), 
                                        .seg_sout(SEGDT));
   Shift_32  XLXI_38 (.clear(rst), 
                     .clk(Div[26]), 
                     .PData(Ai[31:0]), 
                     .SL(SW_OK[9]), 
                     .SR(SW_OK[10]), 
                     .S0(BTN_OK[1]), 
                     .S1(BTN_OK[0]), 
                     .Q(XLXN_101[31:0]));
   Game_Ctrl_Unit  XLXI_59 (.clk(Div[24]), 
                           .hit_body(XLXN_188), 
                           .hit_wall(XLXN_190), 
                           .key1_press(BTN_OK[0]), 
                           .key2_press(BTN_OK[1]), 
                           .key3_press(BTN_OK[2]), 
                           .key4_press(BTN_OK[3]), 
                           .rst(rst), 
                           .dieFlash(XLXN_241), 
                           .gameStatus(XLXN_232[1:0]), 
                           .restart());
   Snake  XLXI_60 (.addLength(addLength), 
                  .clk(Div[1]), 
                  .dieFlash(XLXN_241), 
                  .down_press(BTN_OK[3]), 
                  .gameStatus(XLXN_232[1:0]), 
                  .left_press(BTN_OK[0]), 
                  .right_press(BTN_OK[1]), 
                  .rst(rst), 
                  .up_press(BTN_OK[2]), 
                  .xPos(XLXN_230[9:0]), 
                  .yPos(XLXN_191[9:0]), 
                  .bodyNum(), 
                  .headX(XLXN_181[5:0]), 
                  .headY(XLXN_162[5:0]), 
                  .hitBody(XLXN_188), 
                  .hitWall(XLXN_190), 
                  .snake(XLXN_209[1:0]));
   VGA_Control  XLXI_62 (.foodX(XLXN_212[5:0]), 
                        .foodY(XLXN_217[5:0]), 
                        .snake(XLXN_209[1:0]), 
                        .xPos(XLXN_230[9:0]), 
                        .yPos(XLXN_191[9:0]), 
                        .vgaData(XLXN_222[11:0]));
   VGA  XLXI_63 (.clk(Div[1]), 
                .Din(XLXN_222[11:0]), 
                .rst(rst), 
                .B(vga_blue[3:0]), 
                .col(XLXN_230[9:0]), 
                .G(vga_green[3:0]), 
                .HS(vga_h_sync), 
                .R(vga_red[3:0]), 
                .rdn(), 
                .row(XLXN_191[9:0]), 
                .VS(vga_v_sync));
   Snake_Eatting_Food  XLXI_64 (.clk(Div[1]), 
                               .headX(XLXN_181[5:0]), 
                               .headY(XLXN_162[5:0]), 
                               .rst(rst), 
                               .addLength(addLength), 
                               .foodX(XLXN_212[5:0]), 
                               .foodY(XLXN_217[5:0]), 
                               .score(XLXN_242[31:0]));
endmodule
