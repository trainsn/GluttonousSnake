////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ADC32.vf
// /___/   /\     Timestamp : 01/09/2017 15:46:22
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath E:/logic/Framework-pro/ngc -intstyle ise -family kintex7 -verilog E:/logic/Framework-pro/ADC32.vf -w E:/logic/Framework-pro/Code/ADC32.sch
//Design Name: ADC32
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module CLA_MUSER_ADC32(Ci, 
                       G0, 
                       G1, 
                       G2, 
                       G3, 
                       P0, 
                       P1, 
                       P2, 
                       P3, 
                       C1, 
                       C2, 
                       C3, 
                       GG, 
                       GP);

    input Ci;
    input G0;
    input G1;
    input G2;
    input G3;
    input P0;
    input P1;
    input P2;
    input P3;
   output C1;
   output C2;
   output C3;
   output GG;
   output GP;
   
   wire XLXN_3;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_18;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   
   OR4  OR4_1 (.I0(G2), 
              .I1(XLXN_18), 
              .I2(XLXN_22), 
              .I3(XLXN_23), 
              .O(C3));
   AND2  P0C0 (.I0(P0), 
              .I1(Ci), 
              .O(XLXN_3));
   AND2  P1G0 (.I0(P1), 
              .I1(G0), 
              .O(XLXN_12));
   AND3  P1P0C0 (.I0(P1), 
                .I1(P0), 
                .I2(Ci), 
                .O(XLXN_13));
   AND2  P2G1 (.I0(G1), 
              .I1(P2), 
              .O(XLXN_18));
   AND3  P2P1G0 (.I0(G0), 
                .I1(P2), 
                .I2(P1), 
                .O(XLXN_22));
   AND4  P2P1P0C0 (.I0(P2), 
                  .I1(P1), 
                  .I2(P0), 
                  .I3(Ci), 
                  .O(XLXN_23));
   AND2  P3G2 (.I0(P3), 
              .I1(G2), 
              .O(XLXN_29));
   AND3  P3P2G1 (.I0(P3), 
                .I1(P2), 
                .I2(G1), 
                .O(XLXN_28));
   AND4  P3P2P1G0 (.I0(P3), 
                  .I1(P2), 
                  .I2(P1), 
                  .I3(G0), 
                  .O(XLXN_27));
   AND4  P3P2P1P0 (.I0(P3), 
                  .I1(P2), 
                  .I2(P1), 
                  .I3(P0), 
                  .O(GP));
   OR2  XLXI_21 (.I0(G0), 
                .I1(XLXN_3), 
                .O(C1));
   OR3  XLXI_22 (.I0(G1), 
                .I1(XLXN_12), 
                .I2(XLXN_13), 
                .O(C2));
   OR4  XLXI_30 (.I0(G3), 
                .I1(XLXN_29), 
                .I2(XLXN_28), 
                .I3(XLXN_27), 
                .O(GG));
endmodule
`timescale 1ns / 1ps

module add_MUSER_ADC32(ai, 
                       bi, 
                       ci, 
                       co, 
                       Gi, 
                       Pi, 
                       si);

    input ai;
    input bi;
    input ci;
   output co;
   output Gi;
   output Pi;
   output si;
   
   wire XLXN_11;
   wire Pi_DUMMY;
   wire Gi_DUMMY;
   
   assign Gi = Gi_DUMMY;
   assign Pi = Pi_DUMMY;
   XOR2  XLXI_1 (.I0(bi), 
                .I1(ai), 
                .O(Pi_DUMMY));
   AND2  XLXI_2 (.I0(bi), 
                .I1(ai), 
                .O(Gi_DUMMY));
   AND2  XLXI_3 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(XLXN_11));
   XOR2  XLXI_4 (.I0(ci), 
                .I1(Pi_DUMMY), 
                .O(si));
   OR2  XLXI_5 (.I0(Gi_DUMMY), 
               .I1(XLXN_11), 
               .O(co));
endmodule
`timescale 1ns / 1ps

module add4b_MUSER_ADC32(ai, 
                         bi, 
                         C0, 
                         GG, 
                         GP, 
                         s);

    input [3:0] ai;
    input [3:0] bi;
    input C0;
   output GG;
   output GP;
   output [3:0] s;
   
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_31;
   wire XLXN_35;
   wire XLXN_36;
   
   add_MUSER_ADC32  XLXI_1 (.ai(ai[3]), 
                           .bi(bi[3]), 
                           .ci(XLXN_31), 
                           .co(), 
                           .Gi(XLXN_5), 
                           .Pi(XLXN_15), 
                           .si(s[3]));
   add_MUSER_ADC32  XLXI_2 (.ai(ai[2]), 
                           .bi(bi[2]), 
                           .ci(XLXN_35), 
                           .co(), 
                           .Gi(XLXN_6), 
                           .Pi(XLXN_16), 
                           .si(s[2]));
   add_MUSER_ADC32  XLXI_3 (.ai(ai[1]), 
                           .bi(bi[1]), 
                           .ci(XLXN_36), 
                           .co(), 
                           .Gi(XLXN_7), 
                           .Pi(XLXN_17), 
                           .si(s[1]));
   add_MUSER_ADC32  XLXI_4 (.ai(ai[0]), 
                           .bi(bi[0]), 
                           .ci(C0), 
                           .co(), 
                           .Gi(XLXN_8), 
                           .Pi(XLXN_18), 
                           .si(s[0]));
   CLA_MUSER_ADC32  XLXI_7 (.Ci(C0), 
                           .G0(XLXN_8), 
                           .G1(XLXN_7), 
                           .G2(XLXN_6), 
                           .G3(XLXN_5), 
                           .P0(XLXN_18), 
                           .P1(XLXN_17), 
                           .P2(XLXN_16), 
                           .P3(XLXN_15), 
                           .C1(XLXN_36), 
                           .C2(XLXN_35), 
                           .C3(XLXN_31), 
                           .GG(GG), 
                           .GP(GP));
endmodule
`timescale 1ns / 1ps

module ADC32(ai, 
             bi, 
             C0, 
             Co, 
             s);

    input [31:0] ai;
    input [31:0] bi;
    input C0;
   output Co;
   output [31:0] s;
   
   wire XLXN_33;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_54;
   wire XLXN_55;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_69;
   wire XLXN_70;
   wire XLXN_78;
   wire XLXN_79;
   
   add4b_MUSER_ADC32  XLXI_1 (.ai(ai[3:0]), 
                             .bi(bi[3:0]), 
                             .C0(C0), 
                             .GG(XLXN_35), 
                             .GP(XLXN_33), 
                             .s(s[3:0]));
   add4b_MUSER_ADC32  XLXI_14 (.ai(ai[7:4]), 
                              .bi(bi[7:4]), 
                              .C0(XLXN_79), 
                              .GG(XLXN_37), 
                              .GP(XLXN_36), 
                              .s(s[7:4]));
   add4b_MUSER_ADC32  XLXI_15 (.ai(ai[15:12]), 
                              .bi(bi[15:12]), 
                              .C0(XLXN_60), 
                              .GG(XLXN_41), 
                              .GP(XLXN_39), 
                              .s(s[15:12]));
   add4b_MUSER_ADC32  XLXI_16 (.ai(ai[11:8]), 
                              .bi(bi[11:8]), 
                              .C0(XLXN_59), 
                              .GG(XLXN_40), 
                              .GP(XLXN_38), 
                              .s(s[11:8]));
   add4b_MUSER_ADC32  XLXI_17 (.ai(ai[23:20]), 
                              .bi(bi[23:20]), 
                              .C0(XLXN_66), 
                              .GG(XLXN_45), 
                              .GP(XLXN_44), 
                              .s(s[23:20]));
   add4b_MUSER_ADC32  XLXI_18 (.ai(ai[19:16]), 
                              .bi(bi[19:16]), 
                              .C0(XLXN_61), 
                              .GG(XLXN_43), 
                              .GP(XLXN_42), 
                              .s(s[19:16]));
   add4b_MUSER_ADC32  XLXI_19 (.ai(ai[31:28]), 
                              .bi(bi[31:28]), 
                              .C0(XLXN_68), 
                              .GG(XLXN_49), 
                              .GP(XLXN_48), 
                              .s(s[31:28]));
   add4b_MUSER_ADC32  XLXI_20 (.ai(ai[27:24]), 
                              .bi(bi[27:24]), 
                              .C0(XLXN_67), 
                              .GG(XLXN_47), 
                              .GP(XLXN_46), 
                              .s(s[27:24]));
   CLA_MUSER_ADC32  XLXI_41 (.Ci(C0), 
                            .G0(XLXN_35), 
                            .G1(XLXN_37), 
                            .G2(XLXN_40), 
                            .G3(XLXN_41), 
                            .P0(XLXN_33), 
                            .P1(XLXN_36), 
                            .P2(XLXN_38), 
                            .P3(XLXN_39), 
                            .C1(XLXN_79), 
                            .C2(XLXN_59), 
                            .C3(XLXN_60), 
                            .GG(XLXN_54), 
                            .GP(XLXN_50));
   CLA_MUSER_ADC32  XLXI_42 (.Ci(XLXN_61), 
                            .G0(XLXN_43), 
                            .G1(XLXN_45), 
                            .G2(XLXN_47), 
                            .G3(XLXN_49), 
                            .P0(XLXN_42), 
                            .P1(XLXN_44), 
                            .P2(XLXN_46), 
                            .P3(XLXN_48), 
                            .C1(XLXN_66), 
                            .C2(XLXN_67), 
                            .C3(XLXN_68), 
                            .GG(XLXN_78), 
                            .GP(XLXN_69));
   AND2  XLXI_43 (.I0(C0), 
                 .I1(XLXN_50), 
                 .O(XLXN_55));
   OR2  XLXI_44 (.I0(XLXN_55), 
                .I1(XLXN_54), 
                .O(XLXN_61));
   AND2  XLXI_45 (.I0(XLXN_61), 
                 .I1(XLXN_69), 
                 .O(XLXN_70));
   OR2  XLXI_46 (.I0(XLXN_70), 
                .I1(XLXN_78), 
                .O(Co));
endmodule
